// Generated by CoffeeScript 2.0.0-dev
var CoffeeScript, CoffeeScript, Compiler, escodegen, escodegenFormatDefaults, formatParserError, fs, LiveScript, lscodegen, Nodes, Optimiser, Parser, path, pkg, Preprocessor, uglifyjs;
fs = require('fs');
path = require('path');
formatParserError = require('./helpers').formatParserError;
Nodes = require('./nodes');
Preprocessor = require('./preprocessor').Preprocessor;
Parser = require('./parser');
Optimiser = require('./optimiser').Optimiser;
Compiler = require('./compiler').Compiler;
lscodegen = function () {
  try {
    return require('lscodegen');
  } catch (e$) {
    return;
  }
}.call(this);
escodegen = function () {
  try {
    return require('escodegen');
  } catch (e$) {
    return;
  }
}.call(this);
uglifyjs = function () {
  try {
    return require('uglify-js');
  } catch (e$) {
    return;
  }
}.call(this);
LiveScript = require('LiveScript');
CoffeeScript = null;
pkg = require(path.join(__dirname, '..', '..', 'package.json'));
escodegenFormatDefaults = {
  indent: {
    style: '  ',
    base: 0
  },
  renumber: true,
  hexadecimal: true,
  quotes: 'auto',
  parentheses: false
};
module.exports = {
  Compiler: Compiler,
  Optimiser: Optimiser,
  Parser: Parser,
  Preprocessor: Preprocessor,
  Nodes: Nodes,
  VERSION: pkg.version,
  parse: function (coffee, options) {
    var e, parsed, preprocessed;
    if (null == options)
      options = {};
    if (null != options.optimise)
      options.optimise;
    else
      options.optimise = true;
    try {
      preprocessed = Preprocessor.processSync(coffee);
      parsed = Parser.parse(preprocessed);
      if (options.optimise) {
        return Optimiser.optimise(parsed);
      } else {
        return parsed;
      }
    } catch (e$) {
      e = e$;
      if (!(e instanceof Parser.SyntaxError))
        throw e;
      throw new Error(formatParserError(preprocessed, e));
    }
  },
  compile: function (csAst, options) {
    return Compiler.compile(csAst, options);
  },
  cs: function (csAst, options) {
  },
  ls: function (csAst, options) {
    var handleNodes;
    handleNodes = function (node, o, inFunc) {
      var child, k, name;
      if (node.className === 'Function') {
        o = o.slice();
        inFunc = [];
      }
      if ((node.className === 'AssignOp' || node.className === 'ExistsAssignOp') && node.assignee.className === 'Identifier') {
        name = node.assignee.data;
        if (in$(name, o) && !in$(name, inFunc)) {
          node.reassign = true;
        } else {
          o.push(name);
          inFunc.push(name);
        }
      }
      for (k in node) {
        child = node[k];
        if (!(null != ('undefined' !== typeof child && null != child ? child['instanceof'] : void 0)))
          continue;
        handleNodes(child, o, inFunc);
      }
      for (var i$ = 0, length$ = node.listMembers.length; i$ < length$; ++i$) {
        k = node.listMembers[i$];
        for (var i$1 = 0, length$1 = node[k].length; i$1 < length$1; ++i$1) {
          child = node[k][i$1];
          handleNodes(child, o, inFunc);
        }
      }
    };
    handleNodes(csAst, [], []);
    return lscodegen.generate(csAst);
  },
  ls2js: function (code) {
    return LiveScript.compile(code);
  },
  js: function (jsAst, options) {
    if (null == options)
      options = {};
    if (!(null != escodegen))
      throw new Error('escodegen not found: run `npm install escodegen`');
    return escodegen.generate(jsAst, {
      comment: true,
      format: null != options.format ? options.format : escodegenFormatDefaults
    });
  },
  sourceMap: function (jsAst, name, options) {
    if (null == name)
      name = 'unknown';
    if (null == options)
      options = {};
    if (!(null != escodegen))
      throw new Error('escodegen not found: run `npm install escodegen`');
    return escodegen.generate(jsAst.toJSON(), {
      comment: true,
      sourceMap: name,
      format: null != options.format ? options.format : escodegenFormatDefaults
    });
  }
};
CoffeeScript = module.exports.CoffeeScript = module.exports;
require.extensions['.coffee'] = function (module, filename) {
  var csAst, input, js, ls;
  input = fs.readFileSync(filename, 'utf8');
  csAst = CoffeeScript.parse(input, {optimise: false});
  ls = CoffeeScript.ls(csAst);
  js = CoffeeScript.ls2js(ls);
  return module._compile(js, filename);
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
